// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Opal.Client.Api.Http.V02.Channels.Information;
using Opal.Client.Api.Http.V02.Channels.Item;
using Opal.Client.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Opal.Client.Api.Http.V02.Channels
{
    /// <summary>
    /// Builds and executes requests for operations under \api\http\v0.2\channels
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ChannelsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The information property</summary>
        public global::Opal.Client.Api.Http.V02.Channels.Information.InformationRequestBuilder Information
        {
            get => new global::Opal.Client.Api.Http.V02.Channels.Information.InformationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Opal.Client.api.http.v02.channels.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::Opal.Client.Api.Http.V02.Channels.Item.WithChannelItemRequestBuilder"/></returns>
        public global::Opal.Client.Api.Http.V02.Channels.Item.WithChannelItemRequestBuilder this[Guid position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("channelId", position);
                return new global::Opal.Client.Api.Http.V02.Channels.Item.WithChannelItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the Opal.Client.api.http.v02.channels.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::Opal.Client.Api.Http.V02.Channels.Item.WithChannelItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::Opal.Client.Api.Http.V02.Channels.Item.WithChannelItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("channelId", position);
                return new global::Opal.Client.Api.Http.V02.Channels.Item.WithChannelItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Opal.Client.Api.Http.V02.Channels.ChannelsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ChannelsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/http/v0.2/channels", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Opal.Client.Api.Http.V02.Channels.ChannelsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ChannelsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/http/v0.2/channels", rawUrl)
        {
        }
        /// <summary>
        /// Add a new channel to the system
        /// </summary>
        /// <returns>A <see cref="global::Opal.Client.Models.AddChannelResult"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Opal.Client.Models.ProblemDetails">When receiving a 400 status code</exception>
        /// <exception cref="global::Opal.Client.Models.ProblemDetails">When receiving a 401 status code</exception>
        /// <exception cref="global::Opal.Client.Models.ProblemDetails">When receiving a 403 status code</exception>
        /// <exception cref="global::Opal.Client.Models.ProblemDetails">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Opal.Client.Models.AddChannelResult?> PostAsync(global::Opal.Client.Models.AddChannelRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Opal.Client.Models.AddChannelResult> PostAsync(global::Opal.Client.Models.AddChannelRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Opal.Client.Models.ProblemDetails.CreateFromDiscriminatorValue },
                { "401", global::Opal.Client.Models.ProblemDetails.CreateFromDiscriminatorValue },
                { "403", global::Opal.Client.Models.ProblemDetails.CreateFromDiscriminatorValue },
                { "500", global::Opal.Client.Models.ProblemDetails.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Opal.Client.Models.AddChannelResult>(requestInfo, global::Opal.Client.Models.AddChannelResult.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Add a new channel to the system
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Opal.Client.Models.AddChannelRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Opal.Client.Models.AddChannelRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Opal.Client.Api.Http.V02.Channels.ChannelsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Opal.Client.Api.Http.V02.Channels.ChannelsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Opal.Client.Api.Http.V02.Channels.ChannelsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ChannelsRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
